from slimpicker.providers import ShowInfoProvider, LinkProvider, SubscriptionProvider
from slimpicker.data import Subscriptions
from sys import exit
from datetime import datetime
from argparse import ArgumentParser
from configparser import ConfigParser

class Options:
    parser = ArgumentParser()
    options = ConfigParser()
    args = None
    subscriptions_file = 'subscriptions.ini'
    slimlinks_file = 'slimlinks.dl'
    options_file = "options.ini"
    showrss = {
        'login_url': 'http://showrss.karmorra.info/?cs=login',
        'shows_url': 'http://showrss.karmorra.info/?cs=shows'
    }
    filestube = {
        'service_url': 'http://api.filestube.com'
    }
    tvrage = {
        'search_url': 'http://services.tvrage.com/feeds/search.php',
        'episode_info_url': 'http://services.tvrage.com/feeds/episodeinfo.php',
        'episode_list_url': 'http://services.tvrage.com/feeds/episode_list.php'
    }
    def __init__(self):
        self.init_arg_parser()
        self.parse_arguments()
        self.parse_options(self.options_file)
        self.showrss['username'] = self.options['showrss']['username']
        self.showrss['password'] = self.options['showrss']['password']
        self.filestube['api_key'] = self.options['filestube']['api_key']

    def init_arg_parser(self):
        group = self.parser.add_mutually_exclusive_group()
        group.add_argument('-t', '--template', action="store_true", help="create subscriptions template")
        group.add_argument('-u', '--update', action="store_true", help="bring subscription up-to-date")
        group.add_argument('-d', '--download', action="store_true", help="output download links in file")

    def parse_arguments(self):
        self.args = self.parser.parse_args()

    def parse_options(self, filename):
        try:
            self.options.read_file(open(filename))
        except IOError as e:
            raise IOError(e)


class Console:
    options = Options()
    show_info_provider = ShowInfoProvider(options)
    link_provider = LinkProvider(options)
    subscription_provider = SubscriptionProvider(options)
    subscriptions = Subscriptions(show_info_provider)
    query_string_format = '{:s} S{:s}E{:s}'

    def __init__(self):
        self.subscriptions.load_subscriptions(self.options.subscriptions_file)

    def get_query_strings(self, params = None):
        query_strings_by_show = {}
        self.subscriptions.update_subscriptions()
        for show_name, episodes in self.subscriptions.get_wanted_episodes().items():
            query_strings = []
            for episode in episodes:
                season_number, episode_number = episode.split('x')
                query_string = self.query_string_format.format(show_name, season_number, episode_number)
                if params:
                    query_string += ' ' + params
                query_strings.append(query_string)
            query_strings_by_show[show_name] = query_strings
        return query_strings_by_show


    def get_download_links(self, query_strings):
        download_links_by_show = {}
        for show, query_strings in sorted(query_strings.items()):
            download_links = {}
            for query_string in sorted(query_strings, key=str.lower):
                download_links[query_string] = self.link_provider.get_download_links(query_string, 1, 64, 'avi')
            download_links_by_show[show] = download_links
        return download_links_by_show

    def write_plow_file(self, download_links, filename):
        header = '# This file was generated by slimpicker.\n'
        header += '# {0}\n\n\n'.format(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        content = self.format_plow_data(download_links)
        content = header + content
        with open(filename, 'w') as file:
            file.write(content)
        for episode in self.subscriptions.get_subscriptions().values():
            episode['last'] = episode['latest']
        self.subscriptions.save_subscriptions(self.options.subscriptions_file)

    def format_plow_data(self, download_links):
        content = ''
        for show, episodes in download_links.items():
            if not episodes:
                continue
            content += '##  {0}  ##\n'.format(show)
            for episode, links in episodes.items():
                content += '## {0}\n'.format(episode)
                for link in links:
                    content += '{0}\n'.format(link)
                content += '\n'
            content += '\n'
        return content

    def write_subscription_template(self, filename = 'subscriptions.ini'):
        sp = SubscriptionProvider()
        subscribed_shows = sp.get_subscribed_shows()
        header = '# This file was generated by slimpicker.\n'
        header += '# {0}\n\n\n'.format(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        content = self.format_subscription_template(subscribed_shows)
        content = header + content
        with open(filename, 'w') as file:
            file.write(content)
        self.subscriptions.load_subscriptions(self.options.subscriptions_file)
        self.subscriptions.save_subscriptions(self.options.subscriptions_file)

    def format_subscription_template(self, subscribed_shows):
        content = ''
        for show in subscribed_shows:
            content += '[{0}]\n\n'.format(show)
        return content

    def main(self):
        if self.options.args.template:
            self.write_subscription_template()
        elif self.options.args.update:
            self.subscriptions.load_subscriptions(self.options.subscriptions_file)
            self.subscriptions.save_subscriptions(self.options.subscriptions_file)
        elif self.options.args.download:
            dl = self.get_download_links(self.get_query_strings())
            self.write_plow_file(dl, self.options.slimlinks_file)

if __name__ == '__main__':
    c = Console()
    c.main()
    exit(0)